name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Setup test environment
      run: |
        cp .env.example .env.local
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.local
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.local
        echo "E2E_BASE_URL=http://localhost:8090" >> .env.local
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        npx wait-on http://localhost:8090 --timeout 60000
    
    - name: Run E2E tests
      run: npx playwright test --config=e2e/config/playwright.config.ts --project=${{ matrix.browser }}
      env:
        E2E_BASE_URL: http://localhost:8090
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          artefacts/e2e_dataflow/
          e2e/screenshots/
          e2e/videos/
        retention-days: 30
    
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: artefacts/e2e_dataflow/report/
        retention-days: 30

  mobile-e2e:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
    
    - name: Setup test environment
      run: |
        cp .env.example .env.local
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.local
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.local
        echo "E2E_BASE_URL=http://localhost:8090" >> .env.local
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        npx wait-on http://localhost:8090 --timeout 60000
    
    - name: Run Mobile E2E tests
      run: npx playwright test --config=e2e/config/playwright.config.ts --project="Mobile Chrome"
      env:
        E2E_BASE_URL: http://localhost:8090
    
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-mobile-results
        path: |
          artefacts/e2e_dataflow/
          e2e/screenshots/
        retention-days: 30

  visual-regression:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
    
    - name: Setup test environment
      run: |
        cp .env.example .env.local
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.local
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.local
        echo "E2E_BASE_URL=http://localhost:8090" >> .env.local
    
    - name: Restore visual baselines
      uses: actions/cache@v3
      with:
        path: e2e/screenshots/baseline/
        key: visual-baselines-${{ github.ref }}-${{ hashFiles('src/**/*') }}
        restore-keys: |
          visual-baselines-${{ github.ref }}-
          visual-baselines-main-
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        npx wait-on http://localhost:8090 --timeout 60000
    
    - name: Run Visual Regression tests
      run: npx playwright test --config=e2e/config/playwright.config.ts --grep="visual|screenshot"
      env:
        E2E_BASE_URL: http://localhost:8090
    
    - name: Save visual baselines
      uses: actions/cache@v3
      if: github.ref == 'refs/heads/main'
      with:
        path: e2e/screenshots/baseline/
        key: visual-baselines-${{ github.ref }}-${{ hashFiles('src/**/*') }}
    
    - name: Upload visual diff report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-report
        path: |
          e2e/screenshots/
          artefacts/e2e_dataflow/visual-regression-report.html
        retention-days: 30

  performance-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
    
    - name: Setup test environment
      run: |
        cp .env.example .env.local
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.local
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.local
        echo "E2E_BASE_URL=http://localhost:8090" >> .env.local
    
    - name: Build application (production)
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        npx wait-on http://localhost:8090 --timeout 60000
    
    - name: Run Performance tests
      run: npx playwright test --config=e2e/config/playwright.config.ts --grep="Performance"
      env:
        E2E_BASE_URL: http://localhost:8090
    
    - name: Generate performance report
      run: |
        echo "# Performance Test Results" > performance-summary.md
        echo "## Core Web Vitals" >> performance-summary.md
        echo "Performance metrics captured in artifacts" >> performance-summary.md
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          artefacts/e2e_dataflow/
          performance-summary.md
        retention-days: 30

  generate-report:
    needs: [e2e-tests, mobile-e2e, visual-regression, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Generate consolidated report
      run: |
        mkdir -p consolidated-report
        
        echo "# E2E Test Suite Results" > consolidated-report/README.md
        echo "Test run: $(date)" >> consolidated-report/README.md
        echo "" >> consolidated-report/README.md
        
        if find artifacts/ -name "*.json" -type f | head -1 | xargs test -f; then
          echo "## Test Results Summary" >> consolidated-report/README.md
          echo "- Browser Tests: ‚úÖ Completed" >> consolidated-report/README.md
          echo "- Mobile Tests: ‚úÖ Completed" >> consolidated-report/README.md
          echo "- Visual Regression: ‚úÖ Completed" >> consolidated-report/README.md
          echo "- Performance Tests: ‚úÖ Completed" >> consolidated-report/README.md
        else
          echo "## Test Results Summary" >> consolidated-report/README.md
          echo "- Some tests may have failed - check individual artifacts" >> consolidated-report/README.md
        fi
        
        echo "" >> consolidated-report/README.md
        echo "## Artifacts" >> consolidated-report/README.md
        echo "- Screenshots and videos available in artifacts" >> consolidated-report/README.md
        echo "- HTML reports available for detailed analysis" >> consolidated-report/README.md
        
        # Copy key files to consolidated report
        find artifacts/ -name "*.html" -exec cp {} consolidated-report/ \; 2>/dev/null || true
        find artifacts/ -name "e2e_dataflow.md" -exec cp {} consolidated-report/ \; 2>/dev/null || true
    
    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-e2e-report
        path: consolidated-report/
        retention-days: 90
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = 'consolidated-report/README.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## E2E Test Results\n\n${report}\n\nüîó [View detailed reports in artifacts](${context.payload.pull_request.html_url}/checks)`
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Check for sensitive data in E2E tests
      run: |
        echo "Checking for sensitive data in test files..."
        
        # Check for hardcoded secrets
        if grep -r "password.*=" e2e/ --include="*.ts" --include="*.js"; then
          echo "‚ö†Ô∏è Found potential hardcoded passwords in test files"
          exit 1
        fi
        
        # Check for API keys
        if grep -r "api.*key" e2e/ --include="*.ts" --include="*.js" | grep -v "test-api-key"; then
          echo "‚ö†Ô∏è Found potential API keys in test files"
          exit 1
        fi
        
        echo "‚úÖ No sensitive data found in test files"
    
    - name: Validate test isolation
      run: |
        echo "Validating test isolation..."
        
        # Check that tests don't rely on external services (except localhost)
        if grep -r "http://" e2e/ --include="*.ts" | grep -v "localhost" | grep -v "127.0.0.1"; then
          echo "‚ö†Ô∏è Tests may be calling external services"
          # Note: This is a warning, not a failure for wedding site testing
        fi
        
        echo "‚úÖ Test isolation checks completed"